// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: fizenpay-be/merchant.proto

package fizenpay_be

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetOneBySessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *GetOneBySessionRequest) Reset() {
	*x = GetOneBySessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneBySessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneBySessionRequest) ProtoMessage() {}

func (x *GetOneBySessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneBySessionRequest.ProtoReflect.Descriptor instead.
func (*GetOneBySessionRequest) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{0}
}

func (x *GetOneBySessionRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type GetOneBySessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Merchant *Merchant `protobuf:"bytes,1,opt,name=merchant,proto3" json:"merchant,omitempty"`
}

func (x *GetOneBySessionResponse) Reset() {
	*x = GetOneBySessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneBySessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneBySessionResponse) ProtoMessage() {}

func (x *GetOneBySessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneBySessionResponse.ProtoReflect.Descriptor instead.
func (*GetOneBySessionResponse) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{1}
}

func (x *GetOneBySessionResponse) GetMerchant() *Merchant {
	if x != nil {
		return x.Merchant
	}
	return nil
}

type GetOneByApiKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
}

func (x *GetOneByApiKeyRequest) Reset() {
	*x = GetOneByApiKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneByApiKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneByApiKeyRequest) ProtoMessage() {}

func (x *GetOneByApiKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneByApiKeyRequest.ProtoReflect.Descriptor instead.
func (*GetOneByApiKeyRequest) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{2}
}

func (x *GetOneByApiKeyRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type GetOneByApiKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Merchant *Merchant `protobuf:"bytes,1,opt,name=merchant,proto3" json:"merchant,omitempty"`
}

func (x *GetOneByApiKeyResponse) Reset() {
	*x = GetOneByApiKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOneByApiKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOneByApiKeyResponse) ProtoMessage() {}

func (x *GetOneByApiKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOneByApiKeyResponse.ProtoReflect.Descriptor instead.
func (*GetOneByApiKeyResponse) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{3}
}

func (x *GetOneByApiKeyResponse) GetMerchant() *Merchant {
	if x != nil {
		return x.Merchant
	}
	return nil
}

type FlexiblePayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                       int32   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	UnderPaymentThresholdValue float64 `protobuf:"fixed64,2,opt,name=underPaymentThresholdValue,proto3" json:"underPaymentThresholdValue,omitempty"`
	UnderPaymentCurrency       string  `protobuf:"bytes,3,opt,name=underPaymentCurrency,proto3" json:"underPaymentCurrency,omitempty"`
	OverPaymentThresholdValue  float64 `protobuf:"fixed64,4,opt,name=overPaymentThresholdValue,proto3" json:"overPaymentThresholdValue,omitempty"`
	OverPaymentCurrency        string  `protobuf:"bytes,5,opt,name=overPaymentCurrency,proto3" json:"overPaymentCurrency,omitempty"`
}

func (x *FlexiblePayment) Reset() {
	*x = FlexiblePayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlexiblePayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexiblePayment) ProtoMessage() {}

func (x *FlexiblePayment) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexiblePayment.ProtoReflect.Descriptor instead.
func (*FlexiblePayment) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{4}
}

func (x *FlexiblePayment) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FlexiblePayment) GetUnderPaymentThresholdValue() float64 {
	if x != nil {
		return x.UnderPaymentThresholdValue
	}
	return 0
}

func (x *FlexiblePayment) GetUnderPaymentCurrency() string {
	if x != nil {
		return x.UnderPaymentCurrency
	}
	return ""
}

func (x *FlexiblePayment) GetOverPaymentThresholdValue() float64 {
	if x != nil {
		return x.OverPaymentThresholdValue
	}
	return 0
}

func (x *FlexiblePayment) GetOverPaymentCurrency() string {
	if x != nil {
		return x.OverPaymentCurrency
	}
	return ""
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bip44Path        string `protobuf:"bytes,1,opt,name=bip44Path,proto3" json:"bip44Path,omitempty"`
	Currency         string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	IsMainnet        bool   `protobuf:"varint,3,opt,name=isMainnet,proto3" json:"isMainnet,omitempty"`
	Provider         string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	WssProvider      string `protobuf:"bytes,5,opt,name=wssProvider,proto3" json:"wssProvider,omitempty"`
	Network          string `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	FpMasterContract string `protobuf:"bytes,7,opt,name=fpMasterContract,proto3" json:"fpMasterContract,omitempty"`
	TransactionUrl   string `protobuf:"bytes,8,opt,name=transactionUrl,proto3" json:"transactionUrl,omitempty"`
	Contract         string `protobuf:"bytes,9,opt,name=contract,proto3" json:"contract,omitempty"`
	Address          string `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{5}
}

func (x *Wallet) GetBip44Path() string {
	if x != nil {
		return x.Bip44Path
	}
	return ""
}

func (x *Wallet) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Wallet) GetIsMainnet() bool {
	if x != nil {
		return x.IsMainnet
	}
	return false
}

func (x *Wallet) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Wallet) GetWssProvider() string {
	if x != nil {
		return x.WssProvider
	}
	return ""
}

func (x *Wallet) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Wallet) GetFpMasterContract() string {
	if x != nil {
		return x.FpMasterContract
	}
	return ""
}

func (x *Wallet) GetTransactionUrl() string {
	if x != nil {
		return x.TransactionUrl
	}
	return ""
}

func (x *Wallet) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *Wallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CryptoCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slug               string   `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Network            string   `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Address            string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	CmcId              int32    `protobuf:"varint,5,opt,name=cmcId,proto3" json:"cmcId,omitempty"`
	Decimal            int32    `protobuf:"varint,6,opt,name=decimal,proto3" json:"decimal,omitempty"`
	Type               []string `protobuf:"bytes,7,rep,name=type,proto3" json:"type,omitempty"`
	GasLimit           int32    `protobuf:"varint,8,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	IsEnabled          bool     `protobuf:"varint,9,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	ConfirmedBalance   string   `protobuf:"bytes,10,opt,name=confirmedBalance,proto3" json:"confirmedBalance,omitempty"`
	UnconfirmedBalance string   `protobuf:"bytes,11,opt,name=unconfirmedBalance,proto3" json:"unconfirmedBalance,omitempty"`
	FizenFeeBalance    string   `protobuf:"bytes,12,opt,name=fizenFeeBalance,proto3" json:"fizenFeeBalance,omitempty"`
	Status             int32    `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CryptoCurrency) Reset() {
	*x = CryptoCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoCurrency) ProtoMessage() {}

func (x *CryptoCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoCurrency.ProtoReflect.Descriptor instead.
func (*CryptoCurrency) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{6}
}

func (x *CryptoCurrency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CryptoCurrency) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CryptoCurrency) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CryptoCurrency) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CryptoCurrency) GetCmcId() int32 {
	if x != nil {
		return x.CmcId
	}
	return 0
}

func (x *CryptoCurrency) GetDecimal() int32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *CryptoCurrency) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CryptoCurrency) GetGasLimit() int32 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *CryptoCurrency) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *CryptoCurrency) GetConfirmedBalance() string {
	if x != nil {
		return x.ConfirmedBalance
	}
	return ""
}

func (x *CryptoCurrency) GetUnconfirmedBalance() string {
	if x != nil {
		return x.UnconfirmedBalance
	}
	return ""
}

func (x *CryptoCurrency) GetFizenFeeBalance() string {
	if x != nil {
		return x.FizenFeeBalance
	}
	return ""
}

func (x *CryptoCurrency) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Is2FaEnabled         bool   `protobuf:"varint,1,opt,name=is2faEnabled,proto3" json:"is2faEnabled,omitempty"`
	IsEmailVerifyEnabled bool   `protobuf:"varint,2,opt,name=isEmailVerifyEnabled,proto3" json:"isEmailVerifyEnabled,omitempty"`
	Secret               string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	TmpSecret            string `protobuf:"bytes,4,opt,name=tmpSecret,proto3" json:"tmpSecret,omitempty"`
	EmailCode            string `protobuf:"bytes,5,opt,name=emailCode,proto3" json:"emailCode,omitempty"`
	EmailCodeExp         int32  `protobuf:"varint,6,opt,name=emailCodeExp,proto3" json:"emailCodeExp,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{7}
}

func (x *Security) GetIs2FaEnabled() bool {
	if x != nil {
		return x.Is2FaEnabled
	}
	return false
}

func (x *Security) GetIsEmailVerifyEnabled() bool {
	if x != nil {
		return x.IsEmailVerifyEnabled
	}
	return false
}

func (x *Security) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *Security) GetTmpSecret() string {
	if x != nil {
		return x.TmpSecret
	}
	return ""
}

func (x *Security) GetEmailCode() string {
	if x != nil {
		return x.EmailCode
	}
	return ""
}

func (x *Security) GetEmailCodeExp() int32 {
	if x != nil {
		return x.EmailCodeExp
	}
	return 0
}

type Merchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrentStep             int32                  `protobuf:"varint,2,opt,name=currentStep,proto3" json:"currentStep,omitempty"`
	Name                    string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	AutoWithdrawal          int32                  `protobuf:"varint,4,opt,name=autoWithdrawal,proto3" json:"autoWithdrawal,omitempty"`
	FlexiblePaymentSettings *FlexiblePayment       `protobuf:"bytes,5,opt,name=flexiblePaymentSettings,proto3" json:"flexiblePaymentSettings,omitempty"`
	Email                   string                 `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	SupportEmail            string                 `protobuf:"bytes,7,opt,name=supportEmail,proto3" json:"supportEmail,omitempty"`
	MerchantType            int32                  `protobuf:"varint,8,opt,name=merchantType,proto3" json:"merchantType,omitempty"`
	Wallets                 []*Wallet              `protobuf:"bytes,9,rep,name=wallets,proto3" json:"wallets,omitempty"`
	BackupCode              []string               `protobuf:"bytes,10,rep,name=backupCode,proto3" json:"backupCode,omitempty"`
	CryptoCurrencySettings  []*CryptoCurrency      `protobuf:"bytes,11,rep,name=cryptoCurrencySettings,proto3" json:"cryptoCurrencySettings,omitempty"`
	Provider                int32                  `protobuf:"varint,12,opt,name=provider,proto3" json:"provider,omitempty"`
	Password                string                 `protobuf:"bytes,13,opt,name=password,proto3" json:"password,omitempty"`
	Status                  int32                  `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	ActiveCode              string                 `protobuf:"bytes,15,opt,name=activeCode,proto3" json:"activeCode,omitempty"`
	ForgotPassword          string                 `protobuf:"bytes,16,opt,name=forgotPassword,proto3" json:"forgotPassword,omitempty"`
	Security                *Security              `protobuf:"bytes,17,opt,name=security,proto3" json:"security,omitempty"`
	LocalCurrency           string                 `protobuf:"bytes,18,opt,name=localCurrency,proto3" json:"localCurrency,omitempty"`
	FizenpayFeePerc         float64                `protobuf:"fixed64,19,opt,name=fizenpayFeePerc,proto3" json:"fizenpayFeePerc,omitempty"`
	SharedSecret            string                 `protobuf:"bytes,20,opt,name=sharedSecret,proto3" json:"sharedSecret,omitempty"`
	CreatedAt               *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	RequestCloseAccountAt   *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=requestCloseAccountAt,proto3" json:"requestCloseAccountAt,omitempty"`
	ClosedAccountAt         *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=closedAccountAt,proto3" json:"closedAccountAt,omitempty"`
	UpdateAt                *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	ApprovedStatus          string                 `protobuf:"bytes,25,opt,name=approvedStatus,proto3" json:"approvedStatus,omitempty"`
}

func (x *Merchant) Reset() {
	*x = Merchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Merchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Merchant) ProtoMessage() {}

func (x *Merchant) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Merchant.ProtoReflect.Descriptor instead.
func (*Merchant) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{8}
}

func (x *Merchant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Merchant) GetCurrentStep() int32 {
	if x != nil {
		return x.CurrentStep
	}
	return 0
}

func (x *Merchant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Merchant) GetAutoWithdrawal() int32 {
	if x != nil {
		return x.AutoWithdrawal
	}
	return 0
}

func (x *Merchant) GetFlexiblePaymentSettings() *FlexiblePayment {
	if x != nil {
		return x.FlexiblePaymentSettings
	}
	return nil
}

func (x *Merchant) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Merchant) GetSupportEmail() string {
	if x != nil {
		return x.SupportEmail
	}
	return ""
}

func (x *Merchant) GetMerchantType() int32 {
	if x != nil {
		return x.MerchantType
	}
	return 0
}

func (x *Merchant) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *Merchant) GetBackupCode() []string {
	if x != nil {
		return x.BackupCode
	}
	return nil
}

func (x *Merchant) GetCryptoCurrencySettings() []*CryptoCurrency {
	if x != nil {
		return x.CryptoCurrencySettings
	}
	return nil
}

func (x *Merchant) GetProvider() int32 {
	if x != nil {
		return x.Provider
	}
	return 0
}

func (x *Merchant) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Merchant) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Merchant) GetActiveCode() string {
	if x != nil {
		return x.ActiveCode
	}
	return ""
}

func (x *Merchant) GetForgotPassword() string {
	if x != nil {
		return x.ForgotPassword
	}
	return ""
}

func (x *Merchant) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Merchant) GetLocalCurrency() string {
	if x != nil {
		return x.LocalCurrency
	}
	return ""
}

func (x *Merchant) GetFizenpayFeePerc() float64 {
	if x != nil {
		return x.FizenpayFeePerc
	}
	return 0
}

func (x *Merchant) GetSharedSecret() string {
	if x != nil {
		return x.SharedSecret
	}
	return ""
}

func (x *Merchant) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Merchant) GetRequestCloseAccountAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestCloseAccountAt
	}
	return nil
}

func (x *Merchant) GetClosedAccountAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAccountAt
	}
	return nil
}

func (x *Merchant) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

func (x *Merchant) GetApprovedStatus() string {
	if x != nil {
		return x.ApprovedStatus
	}
	return ""
}

type GetAllMerchantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Merchant `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total int32       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetAllMerchantResponse) Reset() {
	*x = GetAllMerchantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMerchantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMerchantResponse) ProtoMessage() {}

func (x *GetAllMerchantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMerchantResponse.ProtoReflect.Descriptor instead.
func (*GetAllMerchantResponse) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllMerchantResponse) GetItems() []*Merchant {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetAllMerchantResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAllMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPendingApproved string `protobuf:"bytes,1,opt,name=isPendingApproved,proto3" json:"isPendingApproved,omitempty"`
	Search            string `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	Status            string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Limit             int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Page              int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetAllMerchantRequest) Reset() {
	*x = GetAllMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMerchantRequest) ProtoMessage() {}

func (x *GetAllMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMerchantRequest.ProtoReflect.Descriptor instead.
func (*GetAllMerchantRequest) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllMerchantRequest) GetIsPendingApproved() string {
	if x != nil {
		return x.IsPendingApproved
	}
	return ""
}

func (x *GetAllMerchantRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetAllMerchantRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetAllMerchantRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllMerchantRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ActivateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
}

func (x *ActivateAccountRequest) Reset() {
	*x = ActivateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAccountRequest) ProtoMessage() {}

func (x *ActivateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAccountRequest.ProtoReflect.Descriptor instead.
func (*ActivateAccountRequest) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{11}
}

func (x *ActivateAccountRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type ActivateAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateAccountResponse) Reset() {
	*x = ActivateAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAccountResponse) ProtoMessage() {}

func (x *ActivateAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAccountResponse.ProtoReflect.Descriptor instead.
func (*ActivateAccountResponse) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{12}
}

type DeactivateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId string `protobuf:"bytes,1,opt,name=merchantId,proto3" json:"merchantId,omitempty"`
}

func (x *DeactivateAccountRequest) Reset() {
	*x = DeactivateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateAccountRequest) ProtoMessage() {}

func (x *DeactivateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateAccountRequest.ProtoReflect.Descriptor instead.
func (*DeactivateAccountRequest) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{13}
}

func (x *DeactivateAccountRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

type DeactivateAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeactivateAccountResponse) Reset() {
	*x = DeactivateAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fizenpay_be_merchant_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateAccountResponse) ProtoMessage() {}

func (x *DeactivateAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fizenpay_be_merchant_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateAccountResponse.ProtoReflect.Descriptor instead.
func (*DeactivateAccountResponse) Descriptor() ([]byte, []int) {
	return file_fizenpay_be_merchant_proto_rawDescGZIP(), []int{14}
}

var File_fizenpay_be_merchant_proto protoreflect.FileDescriptor

var file_fizenpay_be_merchant_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x2d, 0x62, 0x65, 0x2f, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x66, 0x69,
	0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4c,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69,
	0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x4b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x7a, 0x65,
	0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x52, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x46,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xc2, 0x02, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x70, 0x34, 0x34, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x70, 0x34, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x70, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x88, 0x03, 0x0a, 0x0e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6d,
	0x63, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6d, 0x63, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x46, 0x65, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x69, 0x7a, 0x65, 0x6e, 0x46, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x32, 0x66, 0x61, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x32, 0x66, 0x61,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x45, 0x78, 0x70, 0x22, 0xc3, 0x08, 0x0a, 0x08, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x61, 0x75, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x56,
	0x0a, 0x17, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x46, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x66,
	0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x65, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62,
	0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x16, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x67,
	0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x7a,
	0x65, 0x6e, 0x70, 0x61, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x63, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x46, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65,
	0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x73, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a,
	0x18, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf1, 0x03, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x66,
	0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x66, 0x69, 0x7a,
	0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x66,
	0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62,
	0x65, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79,
	0x5f, 0x62, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12,
	0x22, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x74, 0x61, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2f, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x2d,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x2d, 0x62, 0x65,
	0x3b, 0x66, 0x69, 0x7a, 0x65, 0x6e, 0x70, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fizenpay_be_merchant_proto_rawDescOnce sync.Once
	file_fizenpay_be_merchant_proto_rawDescData = file_fizenpay_be_merchant_proto_rawDesc
)

func file_fizenpay_be_merchant_proto_rawDescGZIP() []byte {
	file_fizenpay_be_merchant_proto_rawDescOnce.Do(func() {
		file_fizenpay_be_merchant_proto_rawDescData = protoimpl.X.CompressGZIP(file_fizenpay_be_merchant_proto_rawDescData)
	})
	return file_fizenpay_be_merchant_proto_rawDescData
}

var file_fizenpay_be_merchant_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_fizenpay_be_merchant_proto_goTypes = []interface{}{
	(*GetOneBySessionRequest)(nil),    // 0: fizenpay_be.GetOneBySessionRequest
	(*GetOneBySessionResponse)(nil),   // 1: fizenpay_be.GetOneBySessionResponse
	(*GetOneByApiKeyRequest)(nil),     // 2: fizenpay_be.GetOneByApiKeyRequest
	(*GetOneByApiKeyResponse)(nil),    // 3: fizenpay_be.GetOneByApiKeyResponse
	(*FlexiblePayment)(nil),           // 4: fizenpay_be.FlexiblePayment
	(*Wallet)(nil),                    // 5: fizenpay_be.Wallet
	(*CryptoCurrency)(nil),            // 6: fizenpay_be.CryptoCurrency
	(*Security)(nil),                  // 7: fizenpay_be.Security
	(*Merchant)(nil),                  // 8: fizenpay_be.Merchant
	(*GetAllMerchantResponse)(nil),    // 9: fizenpay_be.GetAllMerchantResponse
	(*GetAllMerchantRequest)(nil),     // 10: fizenpay_be.GetAllMerchantRequest
	(*ActivateAccountRequest)(nil),    // 11: fizenpay_be.ActivateAccountRequest
	(*ActivateAccountResponse)(nil),   // 12: fizenpay_be.ActivateAccountResponse
	(*DeactivateAccountRequest)(nil),  // 13: fizenpay_be.DeactivateAccountRequest
	(*DeactivateAccountResponse)(nil), // 14: fizenpay_be.DeactivateAccountResponse
	(*timestamppb.Timestamp)(nil),     // 15: google.protobuf.Timestamp
}
var file_fizenpay_be_merchant_proto_depIdxs = []int32{
	8,  // 0: fizenpay_be.GetOneBySessionResponse.merchant:type_name -> fizenpay_be.Merchant
	8,  // 1: fizenpay_be.GetOneByApiKeyResponse.merchant:type_name -> fizenpay_be.Merchant
	4,  // 2: fizenpay_be.Merchant.flexiblePaymentSettings:type_name -> fizenpay_be.FlexiblePayment
	5,  // 3: fizenpay_be.Merchant.wallets:type_name -> fizenpay_be.Wallet
	6,  // 4: fizenpay_be.Merchant.cryptoCurrencySettings:type_name -> fizenpay_be.CryptoCurrency
	7,  // 5: fizenpay_be.Merchant.security:type_name -> fizenpay_be.Security
	15, // 6: fizenpay_be.Merchant.createdAt:type_name -> google.protobuf.Timestamp
	15, // 7: fizenpay_be.Merchant.requestCloseAccountAt:type_name -> google.protobuf.Timestamp
	15, // 8: fizenpay_be.Merchant.closedAccountAt:type_name -> google.protobuf.Timestamp
	15, // 9: fizenpay_be.Merchant.updateAt:type_name -> google.protobuf.Timestamp
	8,  // 10: fizenpay_be.GetAllMerchantResponse.items:type_name -> fizenpay_be.Merchant
	10, // 11: fizenpay_be.MerchantService.GetAllMerchant:input_type -> fizenpay_be.GetAllMerchantRequest
	11, // 12: fizenpay_be.MerchantService.ActivateAccount:input_type -> fizenpay_be.ActivateAccountRequest
	13, // 13: fizenpay_be.MerchantService.DeactivateAccount:input_type -> fizenpay_be.DeactivateAccountRequest
	0,  // 14: fizenpay_be.MerchantService.GetOneBySession:input_type -> fizenpay_be.GetOneBySessionRequest
	2,  // 15: fizenpay_be.MerchantService.GetOneByApiKey:input_type -> fizenpay_be.GetOneByApiKeyRequest
	9,  // 16: fizenpay_be.MerchantService.GetAllMerchant:output_type -> fizenpay_be.GetAllMerchantResponse
	12, // 17: fizenpay_be.MerchantService.ActivateAccount:output_type -> fizenpay_be.ActivateAccountResponse
	14, // 18: fizenpay_be.MerchantService.DeactivateAccount:output_type -> fizenpay_be.DeactivateAccountResponse
	1,  // 19: fizenpay_be.MerchantService.GetOneBySession:output_type -> fizenpay_be.GetOneBySessionResponse
	3,  // 20: fizenpay_be.MerchantService.GetOneByApiKey:output_type -> fizenpay_be.GetOneByApiKeyResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_fizenpay_be_merchant_proto_init() }
func file_fizenpay_be_merchant_proto_init() {
	if File_fizenpay_be_merchant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fizenpay_be_merchant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneBySessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneBySessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneByApiKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOneByApiKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlexiblePayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Merchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllMerchantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fizenpay_be_merchant_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fizenpay_be_merchant_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fizenpay_be_merchant_proto_goTypes,
		DependencyIndexes: file_fizenpay_be_merchant_proto_depIdxs,
		MessageInfos:      file_fizenpay_be_merchant_proto_msgTypes,
	}.Build()
	File_fizenpay_be_merchant_proto = out.File
	file_fizenpay_be_merchant_proto_rawDesc = nil
	file_fizenpay_be_merchant_proto_goTypes = nil
	file_fizenpay_be_merchant_proto_depIdxs = nil
}
