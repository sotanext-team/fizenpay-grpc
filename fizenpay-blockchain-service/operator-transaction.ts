/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace blockchain_service {
    export interface OperatorTransactionService {
        getTransactions(data: GetTransactionsRequest, metadata?: Metadata): Observable<GetTransactionsResponse>;
    }
    export interface GetTransactionsRequest {
        operatorAddress?: string;
        page?: number;
        limit?: number;
        event?: string;
        from?: string;
        to?: string;
        hash?: string;
        merchantContract?: string;
    }
    export interface GetTransactionsResponse {
        transactions?: blockchain_service.TransactionHistory[];
        total?: number;
    }
    export interface TransactionHistory {
        id?: string;
        rawData?: blockchain_service.RawData;
        details?: blockchain_service.Details;
        receiptLogs?: blockchain_service.ReceiptLogs;
        tokenInfo?: blockchain_service.TokenInfo;
        methodName?: string;
        hash?: string;
        network?: string;
        blockTimestamp?: google.protobuf.Timestamp;
        blockNumber?: string;
        blockHash?: string;
        inputHash?: string;
        operator?: string;
        merchantContract?: string;
        from?: string;
        to?: string;
        createdAt?: google.protobuf.Timestamp;
        updatedAt?: google.protobuf.Timestamp;
    }
    export interface RawData {
        blockNumber?: string;
        timeStamp?: string;
        hash?: string;
        nonce?: string;
        blockHash?: string;
        transactionIndex?: string;
        from?: string;
        to?: string;
        value?: string;
        gas?: string;
        gasPrice?: string;
        isError?: string;
        txreceiptStatus?: string;
        input?: string;
        contractAddress?: string;
        cumulativeGasUsed?: string;
        gasUsed?: string;
        confirmations?: string;
    }
    export interface Details {
        blockHash?: string;
        blockNumber?: string;
        from?: string;
        gas?: number;
        gasPrice?: string;
        hash?: string;
        input?: string;
        nonce?: number;
        to?: string;
        transactionIndex?: number;
        value?: string;
        type?: number;
        v?: string;
        r?: string;
        s?: string;
    }
    export interface ReceiptLogs {
        blockHash?: string;
        blockNumber?: number;
        contractAddress?: string;
        cumulativeGasUsed?: number;
        effectiveGasPrice?: number;
        from?: string;
        gasUsed?: number;
        logs?: blockchain_service.Log[];
        logsBloom?: string;
        status?: string;
        to?: string;
        transactionHash?: string;
        transactionIndex?: number;
        type?: string;
    }
    export interface Log {
        address?: string;
        topics?: string[];
        data?: string;
        blockNumber?: number;
        transactionHash?: string;
        transactionIndex?: number;
        blockHash?: string;
        logIndex?: number;
        removed?: boolean;
        id?: string;
    }
    export interface TokenInfo {
        name?: string;
        symbol?: string;
        decimals?: string;
    }
}
export namespace google {
    export namespace protobuf {
        export interface Any {
            type_url?: string;
            value?: Uint8Array;
        }
        export interface Timestamp {
            seconds?: number;
            nanos?: number;
        }
        export interface Struct {
            fields?: { [key: string]: google.protobuf.Value };
        }
        export interface Value {
            nullValue?: google.protobuf.NullValue;
            numberValue?: number;
            stringValue?: string;
            boolValue?: boolean;
            structValue?: google.protobuf.Struct;
            listValue?: google.protobuf.ListValue;
        }
        export enum NullValue {
            NULL_VALUE = 0,
        }
        export interface ListValue {
            values?: google.protobuf.Value[];
        }
    }
}

