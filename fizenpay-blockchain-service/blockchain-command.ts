/**
 * This file is auto-generated by nestjs-proto-gen-ts
 */

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace blockchain_service {
	export interface BlockchainCommandService {
		resolveUnlinkedByRefundToPayer(
			data: ResolveUnlinkedByRefundToPayerRequest,
			metadata?: Metadata,
		): Observable<ResolveUnlinkedByRefundToPayerResponse>;
		resolveUnlinkedBySendToFizen(
			data: ResolveUnlinkedBySendToFizenRequest,
			metadata?: Metadata,
		): Observable<ResolveUnlinkedBySendToFizenResponse>;
		closeMerchant(
			data: CloseMerchantRequest,
			metadata?: Metadata,
		): Observable<CloseMerchantResponse>;
		updateDefaultFizenpayServiceFee(
			data: UpdateDefaultFizenpayServiceFeeRequest,
			metadata?: Metadata,
		): Observable<UpdateDefaultFizenpayServiceFeeResponse>;
		initMerchant(
			data: InitMerchantRequest,
			metadata?: Metadata,
		): Observable<InitMerchantResponse>;
		flushCryptoToMerchant(
			data: FlushCryptoToMerchantRequest,
			metadata?: Metadata,
		): Observable<FlushCryptoToMerchantResponse>;
		setupFizenpayServiceFee(
			data: SetupFizenpayServiceFeeRequest,
			metadata?: Metadata,
		): Observable<SetupFizenpayServiceFeeResponse>;
		withdrawFizenpayServiceFee(
			data: WithdrawFizenpayServiceFeeRequest,
			metadata?: Metadata,
		): Observable<WithdrawFizenpayServiceFeeResponse>;
	}
	// Requests, Responses
	export interface ResolveUnlinkedByRefundToPayerRequest {
		contracAddr?: string;
		chargeCode?: string;
		action?: string;
		tokenAddr?: string;
		netValue?: string;
		fpMasterContract?: string;
		decimal?: number;
		gasLimit?: string;
		tokenPrice?: string;
		nativeTokenPrice?: string;
		network?: string;
	}
	export interface ResolveUnlinkedByRefundToPayerResponse {
		sign?: blockchain_service.TransactionReceipt;
		amountTransfer?: string;
		estimateTransactionFee?: string;
		estimateTransactionFeeInToken?: string;
	}
	export interface ResolveUnlinkedBySendToFizenRequest {
		network?: string;
		contracAddr?: string;
		chargeCode?: string;
		action?: string;
		tokenAddr?: string;
		netValue?: string;
		fpMasterContract?: string;
		decimal?: number;
		gasLimit?: string;
	}
	export interface ResolveUnlinkedBySendToFizenResponse {
		sign?: blockchain_service.TransactionReceipt;
		amountTransfer?: string;
	}
	export interface CloseMerchantRequest {
		network?: string;
		fpMasterContract?: string;
		merchantContract?: string;
		status?: boolean;
	}
	// tslint:disable-next-line:no-empty-interface
	export interface CloseMerchantResponse {}
	export interface UpdateDefaultFizenpayServiceFeeRequest {
		network?: string;
		fpMasterContract?: string;
		serviceFeePerc?: string;
	}
	// tslint:disable-next-line:no-empty-interface
	export interface UpdateDefaultFizenpayServiceFeeResponse {}
	export interface InitMerchantRequest {
		network?: string;
		fpMasterContract?: string;
		merchantWallet?: string;
	}
	export interface InitMerchantResponse {
		txHash?: string;
	}
	export interface FlushCryptoToMerchantRequest {
		network?: string;
		fpMasterContract?: string;
		merchantContract?: string;
		tokenAddr?: string;
		tokenPrice?: string;
		nativeTokenPrice?: string;
		amount?: string;
		decimal?: number;
		gasLimit?: string;
	}
	export interface FlushCryptoToMerchantResponse {
		sign?: blockchain_service.TransactionReceipt;
		estimateTransactionFee?: string;
		estimateTransactionFeeInToken?: string;
		estimateGasPrice?: string;
		estimateGasLimit?: string;
		realTransactionFee?: string;
		realGasPrice?: string;
		realGasLimit?: string;
		realGasUsed?: string;
		amountTransfer?: string;
	}
	export interface SetupFizenpayServiceFeeRequest {
		network?: string;
		fpMasterContract?: string;
		merchantContract?: string;
		serviceFee?: string;
	}
	export interface SetupFizenpayServiceFeeResponse {
		sign?: blockchain_service.TransactionReceipt;
	}
	export interface WithdrawFizenpayServiceFeeRequest {
		network?: string;
		fpMasterContract?: string;
		merchantContract?: string;
		tokenAddr?: string;
	}
	export interface WithdrawFizenpayServiceFeeResponse {
		sign?: blockchain_service.TransactionReceipt;
	}
	// Objects
	export interface TransactionReceipt {
		status?: boolean;
		blockHash?: string;
		blockNumber?: number;
		transactionHash?: string;
		transactionIndex?: number;
		from?: string;
		to?: string;
		contractAddress?: string;
		cumulativeGasUsed?: number;
		gasUsed?: number;
	}
}
