/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace blockchain_service {
    export interface BlockchainCommandService {
        resolveUnlinkedByRefundToPayer(data: ResolveUnlinkedByRefundToPayerRequest, metadata?: Metadata): Observable<ResolveUnlinkedByRefundToPayerResponse>;
        closeMerchant(data: CloseMerchantRequest, metadata?: Metadata): Observable<CloseMerchantResponse>;
    }
    // Requests, Responses
    export interface ResolveUnlinkedByRefundToPayerRequest {
        contracAddr?: string;
        chargeCode?: string;
        action?: string;
        tokenAddr?: string;
        netValue?: string;
        fpMasterContract?: string;
        decimal?: number;
        gasLimit?: string;
        tokenPrice?: string;
        nativeTokenPrice?: string;
        network?: string;
    }
    export interface ResolveUnlinkedByRefundToPayerResponse {
        sign?: blockchain_service.TransactionReceipt;
        amountTransfer?: string;
        estimateTransactionFee?: string;
        estimateTransactionFeeInToken?: string;
    }
    export interface CloseMerchantRequest {
        network?: string;
        fpMasterContract?: string;
        merchantContract?: string;
        status?: boolean;
    }
    // tslint:disable-next-line:no-empty-interface
    export interface CloseMerchantResponse {
    }
    // Objects
    export interface TransactionReceipt {
        status?: boolean;
        blockHash?: string;
        blockNumber?: number;
        transactionHash?: string;
        transactionIndex?: number;
        from?: string;
        to?: string;
        contractAddress?: string;
        cumulativeGasUsed?: number;
        gasUsed?: number;
    }
}

