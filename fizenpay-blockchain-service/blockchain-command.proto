syntax = "proto3";
// import "operating-wallet.proto";
package blockchain_service;

service BlockchainCommandService {
  rpc ResolveUnlinkedByRefundToPayer (ResolveUnlinkedByRefundToPayerRequest) returns (ResolveUnlinkedByRefundToPayerResponse) {};
  rpc ResolveUnlinkedBySendToFizen (ResolveUnlinkedBySendToFizenRequest) returns (ResolveUnlinkedBySendToFizenResponse) {};
  rpc CloseMerchant (CloseMerchantRequest) returns (CloseMerchantResponse) {};
  rpc UpdateDefaultFizenpayServiceFee (UpdateDefaultFizenpayServiceFeeRequest) returns (UpdateDefaultFizenpayServiceFeeResponse) {};
  rpc InitMerchant (InitMerchantRequest) returns (InitMerchantResponse) {};
  rpc FlushCryptoToMerchant (FlushCryptoToMerchantRequest) returns (FlushCryptoToMerchantResponse) {};
  rpc SetupFizenpayServiceFee (SetupFizenpayServiceFeeRequest) returns (SetupFizenpayServiceFeeResponse) {};
  rpc WithdrawFizenpayServiceFee (WithdrawFizenpayServiceFeeRequest) returns (WithdrawFizenpayServiceFeeResponse) {};
}

// Requests, Responses
message ResolveUnlinkedByRefundToPayerRequest {
  string contracAddr = 1;
  string chargeCode = 2;
  string action = 3;
  string tokenAddr = 4;
  string netValue = 5;
  string fpMasterContract = 6;
  int32 decimal = 7;
  string gasLimit = 8;
  string tokenPrice = 9;
  string nativeTokenPrice = 10;
  string network = 11;
}
message ResolveUnlinkedByRefundToPayerResponse {
  TransactionReceipt sign = 1;
  string amountTransfer = 2;
  string estimateTransactionFee = 3;
  string estimateTransactionFeeInToken = 4;
}
message ResolveUnlinkedBySendToFizenRequest {
  string network = 1;
  string contracAddr = 2;
  string chargeCode = 3;
  string action = 4;
  string tokenAddr = 5;
  string netValue = 6;
  string fpMasterContract = 7;
  int32 decimal = 8;
  string gasLimit = 9;
}
message ResolveUnlinkedBySendToFizenResponse {
  TransactionReceipt sign = 1;
  string amountTransfer = 2;
}

message CloseMerchantRequest {
  string network = 1;
  string fpMasterContract = 2;
  string merchantContract = 3;
  bool status = 4;
}
message CloseMerchantResponse {}

message UpdateDefaultFizenpayServiceFeeRequest {
  string network = 1;
  string fpMasterContract = 2;
  string serviceFeePerc = 3;
}
message UpdateDefaultFizenpayServiceFeeResponse {}

message InitMerchantRequest {
  string network = 1;
  string fpMasterContract = 2;
  string merchantWallet = 3;
}
message InitMerchantResponse {
  string txHash = 1;
}

message FlushCryptoToMerchantRequest {
  string network = 1;
  string fpMasterContract = 2;
  string merchantContract = 3;
  string tokenAddr = 4;
  string tokenPrice = 5;
  string nativeTokenPrice = 6;
  string amount = 7;
  int32 decimal = 8;
  string gasLimit = 9;
}
message FlushCryptoToMerchantResponse {
  TransactionReceipt sign = 1;
  string estimateTransactionFee = 2;
  string estimateTransactionFeeInToken = 3;
  string estimateGasPrice = 4;
  string estimateGasLimit = 5;
  string realTransactionFee = 6;
  string realGasPrice = 7;
  string realGasLimit = 8;
  string realGasUsed = 9;
  string amountTransfer = 10;
}

message SetupFizenpayServiceFeeRequest {
  string network = 1;
  string fpMasterContract = 2;
  string merchantContract = 3;
  string serviceFee = 4;
}
message SetupFizenpayServiceFeeResponse {
  TransactionReceipt sign = 1;
}

message WithdrawFizenpayServiceFeeRequest {
  string network = 1;
  string fpMasterContract = 2;
  string merchantContract = 3;
  string tokenAddr = 4;
}
message WithdrawFizenpayServiceFeeResponse {
  TransactionReceipt sign = 1;
}

// Objects
message TransactionReceipt {
  bool status = 1;
  string blockHash = 2;
  int32 blockNumber = 3;
  string transactionHash = 4;
  int32 transactionIndex = 5;
  string from = 6;
  string to = 7;
  string contractAddress = 8;
  int64 cumulativeGasUsed = 9;
  int64 gasUsed = 10;
  string operatorAddress = 11;
}
